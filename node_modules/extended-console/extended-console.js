var moment = require("moment"),
	extend = require("xtend")
	util = require("util"),
	events = require("events");

//Extended object for settings & events
function ExtendedConsole() {
	this.showTimestamp = true;
	this.timestampFormat = "HH:mm";
	this.showLogLevel = true;
};

//Make extended object inherit from events.EventEmitter to handle events
util.inherits(ExtendedConsole, events.EventEmitter);

//Initialize extended object
console.extended = new ExtendedConsole();

//Allows for initializing of properties on require
module.exports = function(options) {
	extend(console.extended, options);
};

var logLevelShortNames = {
	"log": "log",
	"info": "inf",
	"warn": "war",
	"error": "err"
};

//Replace default console logging functions by saving reference to old ones
["log", "info", "warn", "error"].forEach(function(name) {
	var fn = console[name],
		shortName = logLevelShortNames[name];
	console["_" + name] = fn;
	console[name] = function() {
		var prepend = "";
		
		//Timestamp prepending
		if (console.extended.showTimestamp) {
			var timestamp = moment().format("[[]" + console.extended.timestampFormat + "[]]");
			prepend += timestamp;
		}

		//Log level prepending
		if (console.extended.showLogLevel) {
			prepend += "[" + shortName.toUpperCase() + "]";
		}
		
		//Turn arguments into workable array
		var args = Array.prototype.splice.call(arguments, 0);

		//Prepend various info if necessary
		if (prepend)
			args.unshift(prepend);

		//Call events
		console.extended.emit.apply(console.extended, [shortName].concat(args));

		//Apply modified arguments to original function
		return fn.apply(this, args);
	};
});
